import Morphy from "phpmorphy";
import Markup from "node-vk-bot-api/lib/markup.js";

import VK from "./vk.js"
import Bot from "../bot.mjs";
import Explore from "./explore.js";
import DataBase from "./lib/db.js";

import Images, { 
    getBufferByUrl 
} from "./image.js";

import Static, { 
    internalError, 
    onlyGroupAvailable 
} from "./static.js";

import Sentence, { 
    chance, 
    randomInt,  
    useGroupChat,
    shuffleArray,
    randomElement,
    sliceCommandPart
} from "./sentence.js";

export const morphy = new Morphy("ru", {
    storage: Morphy.STORAGE_MEM,
    predict_by_suffix: true,
    predict_by_db: true,
    graminfo_as_text: true,
    use_ancodes_cache: false,
    resolve_ancodes: Morphy.RESOLVE_ANCODES_AS_TEXT,
});

const Syntax = {
    parse(word, catalog) {
        var chunk = String(word).toLowerCase();

        if (/^[0-1]/.test(chunk)) return false;
        if (/^(https?|ftps|www)/.test(chunk)) return false;
        if (/(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}/gim.test(chunk)) return false;

        // replace symbols:
        chunk = chunk.replace(/[^–∞-—è—ë-]/ig, "");
        chunk = chunk.replace(/—ë/ig, "–µ");
        chunk = chunk.replace(/(^-)|(-$)/ig, "");
        chunk = chunk.trim();

        if (!chunk || !chunk.length) return false;

        var partOfSpeech = morphy.getPartOfSpeech(chunk);
        partOfSpeech = partOfSpeech && partOfSpeech[0];

        if (!partOfSpeech || "string" !== typeof partOfSpeech) return false;
        if (
            catalog
            && catalog[partOfSpeech]
            && catalog[partOfSpeech].indexOf(chunk) >= 0
        ) return false;

        return {
            word: chunk,
            valid: true,
            part: partOfSpeech,
        };
    },
    async memo(words) {
        const catalog = await DataBase.getWords();
        let count = 0;
        
        // handle every word manually
        words.map(item => {
            const parser = this.parse(item, catalog);

            if (
                !parser 
                || !parser.valid 
                || !parser.part
            ) return false;
            const { word, part } = parser;
            count++;

            catalog[part] = catalog[part] || [];
            catalog[part].push(word);
        });
        //console.log(`+ ${count}`);

        return await DataBase.setWords(catalog);
    },
    async generateRandom(ctx) {
        const commandChunks = ctx && ctx.message.text.split(" ");
        var messageLength = null;

        // check for command in-message params:
        var thirdChunk = commandChunks && Number(commandChunks[2]);
        if (thirdChunk && !Number.isNaN(thirdChunk) && thirdChunk > 0) {
            thirdChunk = thirdChunk > 50 ? 50 : thirdChunk;
            messageLength = thirdChunk;
        }

        // generate by call database
        const catalog = await DataBase.getWords();

        var wordArray = [];
        Object.keys(catalog).forEach(catalogItem => wordArray = wordArray.concat(catalog[catalogItem]));
        wordArray = shuffleArray(wordArray);

        // by default we generate message 2-13 words
        const randomMessageLength = messageLength || randomInt(2, 13);
        var resultMessage = "";

        for (var i = 0; i < randomMessageLength; i++) {
            let randomIndex = randomInt(0, wordArray.length);
            resultMessage += `${wordArray[randomIndex]} `;
        }

        if (ctx) ctx.reply(resultMessage);
        else return resultMessage;
    },
    async generatePicture(ctx) {
        const catalog = await DataBase.getWords();

        await Bot.execute("messages.send", {
            peer_id: ctx.message.peer_id,
            random_id: randomInt(0, 9e2),
            message: Sentence.buildSentence(catalog, {
                beginPreset: "–†–∏—Å—É—é",
                orderPreset: [ 1 ],
                customWordParser: word => customFormParser(word, [ "–í–ù" ])
            }).replace("?", "") + "..."
        });

        const image = Images.buildRandomPatternImage();
        const upload = await VK.uploadPhoto(image);

        if (upload.error || !upload.photoId) return internalError(ctx);

        return ctx.reply(
            Sentence.buildSentence(catalog, {
                beginPreset: "–≠—Ç–æ",
                orderPreset: randomElement([ [ 1 ], [ 2, 1 ] ]),
                customWordParser: word => customFormParser(word, [ "–ï–î", "–ò–ú" ])
            }),
            upload.photoId
        );
    },

    async getShortExplore(ctx) {
        const { text, peer_id, id } = ctx.message;

        var isAnswered = false;
        const realise = (ApiMessage) => {
            isAnswered = true;

            return Bot.execute("messages.send", { peer_id, random_id: randomInt(1, 4096), ...ApiMessage });
        }

        setTimeout(() => {
            if (isAnswered) return;

            Bot.sendMessage(peer_id, "üòÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∏—â—É –æ—Ç–≤–µ—Ç...");
        }, 2500);

        const IDKAnswers = [
            "–Ø –Ω–µ –Ω–∞—à–µ–ª", "–°–∞–º –Ω–µ –∑–Ω–∞—é", "–î–∞ —è —Å–∞–º –Ω–µ –µ–±—É",
            "–í –¥—É—à–µ –Ω–µ –µ–±—É", "–ü–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ—é", "–ú–Ω–µ –æ–± —ç—Ç–æ–º –º–∞–ª–æ –∏–∑–≤–µ—Å—Ç–Ω–æ",
            "–ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ", "–Ø —Ç–∞–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—é",
            "–Ø –∑–∞–±—ã–ª üò•"
        ];

        const desired = text.replace(/^((\/|!)(–¥|d) )?(wi|wiki|((—á—Ç–æ|–∫—Ç–æ) (—Ç–∞–∫(–æ–µ|–æ–π|–∞—è|–∏–µ)|–∑–Ω–∞—á–∏—Ç)|(what|who) is))/ig, "").trim();
        if (!desired) return realise({ message: randomElement(IDKAnswers) });

        const searchDisered = await Explore.searchWiki(desired);
        if (!searchDisered) return realise({ reply_to: id, message: randomElement(IDKAnswers)});

        const article = await Explore.getWikiSummary(searchDisered.title);
        if (!article || !article.extract) return realise({ reply_to: id, message: randomElement(IDKAnswers)});

        var preview = null;
        if (article.originalimage && article.originalimage.source) {
            const buffer = await getBufferByUrl(article.originalimage.source);
            
            if (buffer) {
                const upload = await VK.uploadPhoto(buffer);
                preview = upload.photoId || null;
            }
        }

        return realise({
            message: article.extract,
            attachment: preview,
            keyboard: Markup.keyboard([[
                Markup.button({ action: { type: "open_link", link: `https://ru.wikipedia.org/wiki/${article.title}`, label: "Wiki üìñ" }}), 
                Markup.button({ action: { type: "open_link", link: `https://www.google.com/search?q=${article.title}`, label: "Google üîé" }})
            ]]).inline()
        });
    },
    math(ctx) {
        const { text } = ctx.message;
        const primary = sliceCommandPart(text, 0, 2);

        if (!primary) return ctx.reply(randomElement([ "–ì–¥–µ –ø—Ä–∏–º–µ—Ä —Ç–æ –±–ª—è—Ç—å?", "–ß–µ—Ç–æ —è –Ω–µ –ø–æ–Ω—è–ª —á–æ —Ç—É—Ç —Ä–µ—à–∞—Ç—å" ]));

        var example = primary.replace(/:/ig, "/").replace(/\^/ig, "**").replace(/ /ig, "");
        if (!/(^[0-9*\/\\(\\) \.+-]+$)/g.test(example)) {
            return ctx.reply(randomElement([
                "–ë–ª—è–¥—å, —è –Ω–µ –±—É–¥—É —ç—Ç–æ —Ä–µ—à–∞—Ç—å", "–ß–µ —Ç—ã –∑–∞ –ø—Ä–∏–º–µ—Ä –ø—Ä–∏—Å–ª–∞–ª",
                "–ö–∞–∫ —è –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç—å?", "–£ –º–µ–Ω—è –Ω–µ –¥–≤–∞ –≤—ã—Å—à–∏—Ö, —Ä–µ—à–∞–π —Å–∞–º",
                "–î–∞–≤–∞–π –¥—Ä—É–≥–æ–π", "–ê–ê–ê–ê–ê –ë–õ–Ø–¢–¨ –Ø –°–õ–û–ú–ê–õ–°–Ø"
            ]));  
        }

        try {
            var answer = eval(example).toLocaleString();
            var prefix = randomElement([
                "–û—Ç–≤–µ—Ç:", "–°—É–¥—è –ø–æ –≤—Å–µ–º—É –±—É–¥–µ—Ç", "–ü–æ –º–æ–∏–º —Ä–∞—Å—á–µ—Ç–∞–º –±—É–¥–µ—Ç",
                "–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ, –±—É–¥–µ—Ç"
            ]);
        } catch (err) {
            return ctx.reply("–ü—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ! üò´");
        }

        return ctx.reply(`${prefix} ${answer}`);
    },

    async commonHandle(ctx, next) {
        const { text, peer_id, from_id } = ctx.message;

        const isGroupChat = useGroupChat(peer_id);
        const isFromBot = from_id < 0;

        const catalog = await DataBase.getWords();

        var isHookTriggered = false;
        var voidHandlers = [];
        const useAvailable = (regex, answerChance, callback) => {
            if (!regex) return voidHandlers.push({ answerChance, callback });
            if (isHookTriggered) return;

            if (regex.test(text)) {
                if (answerChance && !chance(answerChance)) return;
                
                isHookTriggered = true;
                return callback();
            }
        }

        const senderProfile = isFromBot 
        ? await VK.getGroup(from_id)
        : await VK.getUser(from_id);

        var [ senderName, senderSurname ] = [
            !isFromBot ? senderProfile.first_name : senderProfile.name,
            !isFromBot ? senderProfile.last_name : senderProfile.name
        ]

        const Available = [
            [ /^(–±–æ—Ç|bot)(—è—Ä–∞|–∏–∫)?/ig, null, () => {
                var opinionRegex = /^(–±–æ—Ç|bot)(—è—Ä–∞|–∏–∫)?( —Ç—ã)?( —Ç–∞–∫–æ–π)? /ig;

                // if user expresses his opinion about bot
                if (opinionRegex.test(text)) {
                    var parsed = text.replace(opinionRegex, "").trim();

                    var isGoodOpinion = 
                        /–∫—Ä—É—Ç|–Ω–∞–π—Å|–Ω–æ—Ä–º|–º–æ–ª–æ–¥|–ø—Ä–µ—Å–µ–ª–Ω|—à–∏–∫–∞—Ä|—Å—É–ø–µ|–ø—Ä–µ–∫—Ä–∞|–∑–∞–º–µ—á|–Ω–µ–ø–ª–æ—Ö|—Ö(–æ|–∞)—Ä–æ—à|(–∞|–æ)—Ö—É–µ–Ω|–∑–∞–µ–±–∞—Ç/ig.test(parsed);
                    if (!isGoodOpinion) {
                        return ctx.reply(`${randomElement([
                            "–ú–∞–º–∫–∞ —Ç–≤–æ—è", "–ë–∞—Ç—è —Ç–≤–æ–π",
                            senderName + ", —Ç—ã"
                        ])} ` + parsed);
                    } else return ctx.reply(randomElement([
                        "–ú—ã —ç—Ç–æ –∏ —Ç–∞–∫ –∑–Ω–∞–µ–º", "–ö—Ç–æ –±—ã —Å–æ–º–Ω–µ–≤–∞–ª—Å—è",
                        "–î–∞ —Å–∞–º–æ —Å–æ–±–æ–π üòé", "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                    ]));
                }

                return ctx.reply(randomElement([
                    "–Ø –Ω–µ–π—Ä–æ—Å–µ—Ç—å", `–ë–ª—è—Ç—å, –∑–∞—Ç–æ —è –∑–Ω–∞—é, —á—Ç–æ —Ç–∞–∫–æ–µ ${randomElement([ "–ø–æ–¥–ª–µ–∂–∞—â–µ–µ", "—Å–∫–∞–∑—É–µ–º–æ–µ", "–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ" ])} üôÑ`,
                    "–¢—É—Ç —Ç–∞–∫–∏—Ö –Ω–µ—Ç", "–ö–æ–≥–æ —Ç—ã –æ–±–æ—Å—Ä–∞—Ç—å —Ä–µ—à–∏–ª, –∫–ª–æ—É–Ω?",
                    Sentence.buildSentence(catalog),
                    Static.Default()
                ]));
            }],

            [ /^((\/|!)(–¥|d) )?(wi|wiki|((—á—Ç–æ|–∫—Ç–æ) (—Ç–∞–∫(–æ–µ|–æ–π|–∞—è|–∏–µ)|–∑–Ω–∞—á–∏—Ç)|(what|who) is)) ([^\s]){1,}/ig, 100, () => this.getShortExplore(ctx) ],
            [ /^(\/|!)?((d|–¥) )?(–∫—Ç–æ|who|–∫–æ–≥–æ|–∫–æ–º—É) ([^\s]){1,}/ig, 100, async () => {
                if (!isGroupChat) return onlyGroupAvailable(ctx);

                const content = text.replace(/^(\/|!)?((d|–¥) )?(–∫—Ç–æ|who|–∫–æ–≥–æ|–∫–æ–º—É)/ig, "").trim();
                const members = await Bot.execute("messages.getConversationMembers", { peer_id });

                if (!members || !members.profiles) return internalError(ctx);
                if (members.profiles.length < 2) return ctx.reply(randomElement([
                    "–¢—ã –æ–¥–∏–Ω –≤ –±–µ—Å–µ–¥–µ, —É–º–Ω–∏–∫ üòÇ", "–í –±–µ—Å–µ–¥–µ –∫—Ä–æ–º–µ —Ç–µ–±—è –Ω–∏–∫–æ–≥–æ, –≥–µ–Ω–∏–π –±–ª—è—Ç—å"
                ]));

                const target = randomElement(members.profiles);
                return ctx.reply(
                    `[id${target.id}|${target.first_name}] ${content}`
                );
            }],
            
            [ /js|types|java|(–¥)?(–∂|—è)–∞–≤–∞|python|–ø(–∏|–µ)—Ç–æ–Ω|php|node|–∂(—ç|–µ){1,}—Å$|c(\+|#)|php|htm|css/ig, 100, () => {
                return ctx.reply(randomElement([
                    "–ë–æ—Ç –Ω–∞ –ö—É–ú–∏—Ä–µ", "robot.move 5",
                    "program bot;\nvar i: integer\nbegin\n\n i := 0;\nif (i < 1) then writeln('ArsenyJS –µ–±–ª–∞–Ω');\n\nend.",
                    `–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ html?\n–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –ø—Ä–∏–º–µ—Ä–Ω–æ ${randomInt(120, 366)} 000 (0,${randomInt(35, 99)} —Å–µ–∫.)`,
                    "–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ –º–µ–Ω—è –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –±–ª–æ–∫–Ω–æ—Ç–µ"
                ]));
            }],
            [ /(youtu(\.)?be(.com)?)|—é—Ç—É–±/ig, 75, () => {
                if (/\/shorts/.test(text)) return ctx.reply(randomElement([
                    "–§—É –±–ª—è—Ç—å –≤—ã–∫–ª—é—á–∏", "–¢–µ–±–µ –Ω–æ—Ä–º —Ç–∞–∫—É—é —Ö—É–π–Ω—é —Å–∫–∏–¥—ã–≤–∞—Ç—å?",
                    "–≠—Ç–æ —á–æ –∑–∞ –≥–∏–±—Ä–∏–¥ —Å –¢–∏–∫–¢–æ–∫–æ–º", "–î–∞–∂–µ –Ω–µ –ø—Ä–æ—Å–∏ –º–µ–Ω—è —ç—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å",
                    "–û–ø—è—Ç—å —à–∫–æ–ª–æ—Ç–∞ –ø–ª—è—à–µ—Ç", "–ü—É—Å—Ç—å –∏–¥—ë—Ç —É—Ä–æ–∫–∏ –¥–µ–ª–∞–µ—Ç"
                ]));

                return ctx.reply(randomElement([
                    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–µ TikTok", "–Ø —Å–º–æ—Ç—Ä–µ–ª, —Ç–∞–º –µ–±–ª–∞–Ω –∫—Ä–∏—á–∏—Ç —á–æ—Ç–æ",
                    "–≠—Ç–æ –ø—Ä–æ —á–æ", "–ù–æ—Ä–º –≤–∏–¥–æ—Å", "–û–ø—è—Ç—å –ø–æ—à–ª—è—Ç–∏–Ω–∞", "–ò–¥–∏ –Ω–∞—Ö—É–π, —è –Ω–µ –±—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å",
                    `–ù–∞ ${randomInt(2, 8)}-–π —Å–µ–∫—É–Ω–¥–µ –Ω–∞ –º–µ–Ω—è –ø–æ—Ö–æ–∂!`, "–Ø —Ç–∞–∫–æ–µ –Ω–µ —Å–º–æ—Ç—Ä—é",
                    "–£—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å —é—Ç—É–±–∞ –±–ª—è—Ç—å —Å–Ω–æ–≤–∞", "–°–∫–∞–∂–∏ —ç—Ç–æ–º—É —à–∫–æ–ª—å–Ω–∏–∫—É, —á—Ç–æ–±—ã –∫—É–ø–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω, —è –Ω–∏—Ö—É—è –Ω–µ –ø–æ–Ω—è–ª",
                    "–ê–ê–ê–ê –í–´–ö–õ–Æ–ß–ò –ù–ê–•–£–ô!!!", "–Ø –Ω–µ –ø–æ–Ω—è–ª –ø—Ä–∏–∫–æ–ª–∞ —Ç—É—Ç", "–û–±—ä—è—Å–Ω–∏—Ç–µ –º–Ω–µ –ø–∂"
                ]));
            }],
            [ /(vm\.)?tiktok\.com|—Ç–∏–∫—Ç–æ–∫/ig, 85, () => {
                if (/(vm\.)?tiktok\.com/ig.test(text)) return ctx.reply(randomElement([
                    "–û–ø—è—Ç—å –∫—Ä–∏–Ω–∂–∞—Ç–∏–Ω–∞", "–î–∞–Ω–µ—á–∫–∞ –ú–∏–ª–æ—Ö–∏–Ω!",
                    "–Ø —Ç–∞–∫ —Å—Ä–∞–∑—É –∏ –Ω–µ —É–∑–Ω–∞–ª", "–û—á–µ—Ä–µ–¥–Ω–∞—è —à–∫–æ–ª–æ—Ç–∞ —Ö—É–π–Ω—é —Å–Ω–∏–º–∞–µ—Ç",
                    "–Ø –¥–∞–∂–µ –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ –Ω–µ –±—É–¥—É", "–£ –º–µ–Ω—è –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
                    "–î–∞ –ì–æ—Å–ø–æ–¥–∏, —É–¥–∞–ª–∏ —Ç—ã —ç—Ç–æ", "–î–∞–∂–µ –Ω–µ –ø—Ä–æ—Å–∏ —ç—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å",
                    "–í–∏–¥–µ—Ç—å –Ω–µ —Ö–æ—á—É, —á—Ç–æ —Ç–∞–º.", "–ú–æ–∂–µ—à—å –±–æ–ª—å—à–µ –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —ç—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å"
                ]));

                return ctx.reply(randomElement([
                    "–û—Ç –æ–¥–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ—à–Ω–∏—Ç", "–ò–∑ –ø–∞–º—è—Ç–∏ —É –º–µ–Ω—è —Ç–æ–ª—å–∫–æ 16–≥–± –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π, –ø–æ—ç—Ç–æ–º—É —è —Ö–æ—á—É —ç—Ç–æ –∑–∞–±—ã—Ç—å",
                    "–Ø –±—ã —É–¥–∞–ª–∏–ª", "–£–¥–∞–ª–∏—Ç–µ –Ω–∞—Ö—É–π —Ç–∏–∫—Ç–æ–∫"
                ]));
            }],

            [ /^(–¥(–∞){1,}|d(a){1,}|l(f){1,})$/ig, 17, () => ctx.reply(randomElement([ "–ü–∏–∑–¥–∞", "–ü–∏–∑–¥–∞ –ê–•–•–ê–•–ê–•–ê", "–ü—Ä–æ–≤–æ–¥–∞ –±–ª—è—Ç—å" ])) ],
            [ /^(–Ω(–µ){1,}—Ç|y(t){1,}n|n(e){1,}t)$/ig, 12, () => ctx.reply(randomElement([ "–ú–∏–Ω–µ—Ç", "–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç >=(", "–í –∫–∞—Ä–∞–≥–∞–Ω–¥–µ" ])) ],
            [ /–∞–º–µ—Ä–∏–∫|—Å—à–∞|–±–∞–π–¥–µ–Ω|–æ–±–∞–º|—Ç—Ä–∞–º–ø/ig, 25, () => ctx.reply(randomElement([ "–Ø —Ä—É—Å—Å–∫–∏–π", "–ú–µ–Ω—è –µ—â–µ –Ω–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –±–ª—è—Ç—å" ])) ],

            [ null, 5, async () => {
                if (!senderProfile) return;

                const appealWord = randomElement([ senderName, senderSurname]);
                const catalog = await DataBase.getWords();
                const sentance = Sentence.buildSentence(catalog, {
                    beginPreset: appealWord,
                    customWordParser: word => customFormParser(word, [ "–ï–î", "–ò–ú" ]),
                    orderPreset: randomElement([ 
                        [ 1 ], [ 2 ],
                        [ 0, 1 ], [ 1, 1 ], [ 2, 1 ]
                    ])
                });

                return ctx.reply(sentance);
            }],
            [ null, 5, () => ctx.reply(Static.Default()) ]
        ];

        Available.map(([ regex, chance, handler ]) => {
            return useAvailable(regex, chance, handler);
        });

        if (isHookTriggered) return;

        const randomFn = randomElement(voidHandlers);
        if (
            randomFn.answerChance 
            && isGroupChat
            && !chance(randomFn.answerChance)
        ) return next();

        return randomFn.callback();
    }
}

export default Syntax;

export const customFormParser = (word, grammems) => {
    let prevent = morphy.castFormByGramInfo(word, null, grammems, true);
    prevent = prevent && prevent[0];

    return (prevent || word).toLowerCase();
}